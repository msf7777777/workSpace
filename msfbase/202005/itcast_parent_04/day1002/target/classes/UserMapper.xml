<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    通常, 一个表 对应 一个 XXXMapper.xml文件
    一个 XXXMapper.xml文件 对应 唯一的 namespace
-->
<mapper namespace="UserMapper">
    <!--需求1: 根据用户编号 查询用户信息

        select标签表示 当前是一个 查询语句
            id属性 是sql语句的唯一标志
            resultType 结果类型, 将查询的结果封装到指定的对象中
    -->
    <select id="queryById" resultType="cn.itcast.pojo.User">
        select *, user_name AS userName from tb_user where id=#{id}
    </select>

    <!--查询所有
           注意: 虽然查询的结果是list集合, 但是需要指定 resultType 结果类型为 list集合中的元素类型
    -->
    <select id="queryAll" resultType="cn.itcast.pojo.User">
          select *, user_name AS userName from tb_user
    </select>

    <!--插入一条sql语句
        #{password}  mybatis会动态调用 参数对象的getPassword()方法
    -->
    <insert id="insertUser" parameterType="cn.itcast.pojo.User">
        insert into tb_user(id, user_name, password, name, age, sex, birthday, created, updated)
        values(null, #{userName}, #{password}, #{name}, #{age}, #{sex}, #{birthday}, now(), now())
    </insert>

    <!--修改-->
    <update id="updateUser" parameterType="cn.itcast.pojo.User">
          update tb_user
            set
                user_name=#{userName},
                password=#{password},
                name=#{name},
                age=#{age},
                sex=#{sex},
                birthday=#{birthday},
                updated=now()
            where id = #{id}
    </update>

    <!--据id 删除对应的用户-->
    <delete id="delById" parameterType="java.lang.Long">
          delete from tb_user where id = #{id}
    </delete>

</mapper>